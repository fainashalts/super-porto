/// <reference types="node" resolution-mode="require"/>
export declare const testAccount: import("viem").PrivateKeyAccount;
/** Chain A **/
export declare const publicClientA: import("viem").Client<import("viem").HttpTransport, {
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined;
    contracts: {
        readonly opChainProxyAdmin: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly addressManager: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1Erc721BridgeProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly systemConfig: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismMintableErc20FactoryProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1StandardBridge: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1CrossDomainMessenger: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismPortal: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly disputeGameFactory: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly anchorStateRegistry: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly faultDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly permissionedDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    id: 901;
    name: "Supersim L2 A";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:9545"];
        };
    };
    sourceId: 900;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    readonly formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: `0x${string}`;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: `0x${string}`;
                mixHash: `0x${string}`;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentHash: `0x${string}`;
                receiptsRoot: `0x${string}`;
                sealFields: `0x${string}`[];
                sha3Uncles: `0x${string}`;
                size: bigint;
                stateRoot: `0x${string}`;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                transactionsRoot: `0x${string}`;
                uncles: `0x${string}`[];
                withdrawals?: import("viem").Withdrawal[] | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            };
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean | undefined;
                mint?: bigint | undefined;
                sourceHash: `0x${string}`;
                type: "deposit";
            } | {
                r: `0x${string}`;
                s: `0x${string}`;
                v: bigint;
                to: `0x${string}` | null;
                from: `0x${string}`;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: `0x${string}`;
                input: `0x${string}`;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                accessList?: undefined;
                blobVersionedHashes?: undefined;
                chainId?: number | undefined;
                yParity?: undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes: readonly `0x${string}`[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            };
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: `0x${string}`;
                blockNumber: bigint;
                contractAddress: `0x${string}` | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: `0x${string}`;
                gasUsed: bigint;
                logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                logsBloom: `0x${string}`;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: `0x${string}` | null;
                transactionHash: `0x${string}`;
                transactionIndex: number;
                type: import("viem").TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            };
            type: "transactionReceipt";
        };
    };
    readonly serializers: {
        readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
    };
}, undefined, import("viem").PublicRpcSchema, {
    buildDepositTransaction: <chainOverride extends import("viem").Chain | undefined = undefined, accountOverride extends `0x${string}` | import("viem").Account | undefined = undefined>(parameters: import("viem/op-stack").BuildDepositTransactionParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride, accountOverride>) => Promise<import("viem/op-stack").BuildDepositTransactionReturnType<undefined, accountOverride>>;
    buildProveWithdrawal: <chainOverride_1 extends import("viem").Chain | undefined = undefined, accountOverride_1 extends `0x${string}` | import("viem").Account | undefined = undefined>(parameters: import("viem/op-stack").BuildProveWithdrawalParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_1, accountOverride_1>) => Promise<{
        l2OutputIndex: bigint;
        outputRootProof: {
            version: `0x${string}`;
            stateRoot: `0x${string}`;
            messagePasserStorageRoot: `0x${string}`;
            latestBlockhash: `0x${string}`;
        };
        withdrawalProof: readonly `0x${string}`[];
        withdrawal: {
            data: `0x${string}`;
            gasLimit: bigint;
            nonce: bigint;
            sender: `0x${string}`;
            target: `0x${string}`;
            value: bigint;
        };
        account: import("viem").DeriveAccount<undefined, accountOverride_1>;
        targetChain: import("viem").DeriveChain<{
            blockExplorers?: {
                [key: string]: {
                    name: string;
                    url: string;
                    apiUrl?: string | undefined;
                };
                default: {
                    name: string;
                    url: string;
                    apiUrl?: string | undefined;
                };
            } | undefined;
            contracts: {
                readonly opChainProxyAdmin: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly addressManager: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly l1Erc721BridgeProxy: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly systemConfig: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly optimismMintableErc20FactoryProxy: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly l1StandardBridge: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly l1CrossDomainMessenger: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly optimismPortal: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly disputeGameFactory: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly anchorStateRegistry: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly faultDisputeGame: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly permissionedDisputeGame: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 901;
            name: "Supersim L2 A";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["http://127.0.0.1:9545"];
                };
            };
            sourceId: 900;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            readonly formatters: {
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint;
                        excessBlobGas: bigint;
                        extraData: `0x${string}`;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: `0x${string}`;
                        mixHash: `0x${string}`;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentHash: `0x${string}`;
                        receiptsRoot: `0x${string}`;
                        sealFields: `0x${string}`[];
                        sha3Uncles: `0x${string}`;
                        size: bigint;
                        stateRoot: `0x${string}`;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                        transactionsRoot: `0x${string}`;
                        uncles: `0x${string}`[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: `0x${string}` | undefined;
                    };
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                        type: "deposit";
                    } | {
                        r: `0x${string}`;
                        s: `0x${string}`;
                        v: bigint;
                        to: `0x${string}` | null;
                        from: `0x${string}`;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        accessList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        blobVersionedHashes: readonly `0x${string}`[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    };
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                        blobGasPrice?: bigint | undefined;
                        blobGasUsed?: bigint | undefined;
                        blockHash: `0x${string}`;
                        blockNumber: bigint;
                        contractAddress: `0x${string}` | null | undefined;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: `0x${string}`;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                        logsBloom: `0x${string}`;
                        root?: `0x${string}` | undefined;
                        status: "success" | "reverted";
                        to: `0x${string}` | null;
                        transactionHash: `0x${string}`;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    };
                    type: "transactionReceipt";
                };
            };
            readonly serializers: {
                readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
            };
        }, chainOverride_1>;
    }>;
    estimateContractL1Fee: <const abi extends readonly unknown[] | import("viem").Abi, functionName extends import("viem").ContractFunctionName<abi, "payable" | "nonpayable">, args extends import("viem").ContractFunctionArgs<abi, "view" | "pure", functionName>, chainOverride_2 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateContractL1FeeParameters<abi, functionName, args, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_2>) => Promise<bigint>;
    estimateContractL1Gas: <const abi_1 extends readonly unknown[] | import("viem").Abi, functionName_1 extends import("viem").ContractFunctionName<abi_1, "payable" | "nonpayable">, args_1 extends import("viem").ContractFunctionArgs<abi_1, "view" | "pure", functionName_1>, chainOverride_3 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateContractL1GasParameters<abi_1, functionName_1, args_1, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_3>) => Promise<bigint>;
    estimateContractTotalFee: <const abi_2 extends readonly unknown[] | import("viem").Abi, functionName_2 extends import("viem").ContractFunctionName<abi_2, "payable" | "nonpayable">, args_2 extends import("viem").ContractFunctionArgs<abi_2, "view" | "pure", functionName_2>, chainOverride_4 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateContractTotalFeeParameters<abi_2, functionName_2, args_2, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_4>) => Promise<bigint>;
    estimateContractTotalGas: <const abi_3 extends readonly unknown[] | import("viem").Abi, functionName_3 extends import("viem").ContractFunctionName<abi_3, "payable" | "nonpayable">, args_3 extends import("viem").ContractFunctionArgs<abi_3, "view" | "pure", functionName_3>, chainOverride_5 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateContractTotalGasParameters<abi_3, functionName_3, args_3, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_5>) => Promise<bigint>;
    estimateInitiateWithdrawalGas: <chainOverride_6 extends import("viem").Chain | undefined = undefined>(parameters: import("node_modules/viem/_types/op-stack/actions/estimateInitiateWithdrawalGas.js").EstimateInitiateWithdrawalGasParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_6>) => Promise<bigint>;
    estimateL1Fee: <chainOverride_7 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateL1FeeParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_7>) => Promise<bigint>;
    getL1BaseFee: <chainOverride_8 extends import("viem").Chain | undefined = undefined>(parameters?: import("viem/op-stack").GetL1BaseFeeParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, chainOverride_8> | undefined) => Promise<bigint>;
    estimateL1Gas: <chainOverride_9 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateL1GasParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_9>) => Promise<bigint>;
    estimateTotalFee: <chainOverride_10 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateTotalFeeParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_10>) => Promise<bigint>;
    estimateTotalGas: <chainOverride_11 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateTotalGasParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_11>) => Promise<bigint>;
    interop: import("../decorators/publicL2.js").PublicInteropActionsL2<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined>;
} & import("viem").PublicActions<import("viem").HttpTransport, {
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined;
    contracts: {
        readonly opChainProxyAdmin: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly addressManager: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1Erc721BridgeProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly systemConfig: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismMintableErc20FactoryProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1StandardBridge: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1CrossDomainMessenger: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismPortal: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly disputeGameFactory: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly anchorStateRegistry: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly faultDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly permissionedDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    id: 901;
    name: "Supersim L2 A";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:9545"];
        };
    };
    sourceId: 900;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    readonly formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: `0x${string}`;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: `0x${string}`;
                mixHash: `0x${string}`;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentHash: `0x${string}`;
                receiptsRoot: `0x${string}`;
                sealFields: `0x${string}`[];
                sha3Uncles: `0x${string}`;
                size: bigint;
                stateRoot: `0x${string}`;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                transactionsRoot: `0x${string}`;
                uncles: `0x${string}`[];
                withdrawals?: import("viem").Withdrawal[] | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            };
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean | undefined;
                mint?: bigint | undefined;
                sourceHash: `0x${string}`;
                type: "deposit";
            } | {
                r: `0x${string}`;
                s: `0x${string}`;
                v: bigint;
                to: `0x${string}` | null;
                from: `0x${string}`;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: `0x${string}`;
                input: `0x${string}`;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                accessList?: undefined;
                blobVersionedHashes?: undefined;
                chainId?: number | undefined;
                yParity?: undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes: readonly `0x${string}`[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            };
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: `0x${string}`;
                blockNumber: bigint;
                contractAddress: `0x${string}` | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: `0x${string}`;
                gasUsed: bigint;
                logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                logsBloom: `0x${string}`;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: `0x${string}` | null;
                transactionHash: `0x${string}`;
                transactionIndex: number;
                type: import("viem").TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            };
            type: "transactionReceipt";
        };
    };
    readonly serializers: {
        readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
    };
}>>;
export declare const walletClientA: import("viem").Client<import("viem").HttpTransport, {
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined;
    contracts: {
        readonly opChainProxyAdmin: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly addressManager: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1Erc721BridgeProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly systemConfig: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismMintableErc20FactoryProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1StandardBridge: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1CrossDomainMessenger: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismPortal: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly disputeGameFactory: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly anchorStateRegistry: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly faultDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly permissionedDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    id: 901;
    name: "Supersim L2 A";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:9545"];
        };
    };
    sourceId: 900;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    readonly formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: `0x${string}`;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: `0x${string}`;
                mixHash: `0x${string}`;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentHash: `0x${string}`;
                receiptsRoot: `0x${string}`;
                sealFields: `0x${string}`[];
                sha3Uncles: `0x${string}`;
                size: bigint;
                stateRoot: `0x${string}`;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                transactionsRoot: `0x${string}`;
                uncles: `0x${string}`[];
                withdrawals?: import("viem").Withdrawal[] | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            };
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean | undefined;
                mint?: bigint | undefined;
                sourceHash: `0x${string}`;
                type: "deposit";
            } | {
                r: `0x${string}`;
                s: `0x${string}`;
                v: bigint;
                to: `0x${string}` | null;
                from: `0x${string}`;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: `0x${string}`;
                input: `0x${string}`;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                accessList?: undefined;
                blobVersionedHashes?: undefined;
                chainId?: number | undefined;
                yParity?: undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes: readonly `0x${string}`[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            };
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: `0x${string}`;
                blockNumber: bigint;
                contractAddress: `0x${string}` | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: `0x${string}`;
                gasUsed: bigint;
                logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                logsBloom: `0x${string}`;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: `0x${string}` | null;
                transactionHash: `0x${string}`;
                transactionIndex: number;
                type: import("viem").TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            };
            type: "transactionReceipt";
        };
    };
    readonly serializers: {
        readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
    };
}, import("viem").PrivateKeyAccount, import("viem").WalletRpcSchema, {
    initiateWithdrawal: <chainOverride extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").InitiateWithdrawalParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, import("viem").PrivateKeyAccount, chainOverride>) => Promise<`0x${string}`>;
    interop: import("../decorators/walletL2.js").WalletInteropActionsL2<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, import("viem").PrivateKeyAccount>;
} & import("viem").WalletActions<{
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined;
    contracts: {
        readonly opChainProxyAdmin: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly addressManager: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1Erc721BridgeProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly systemConfig: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismMintableErc20FactoryProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1StandardBridge: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1CrossDomainMessenger: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismPortal: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly disputeGameFactory: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly anchorStateRegistry: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly faultDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly permissionedDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    id: 901;
    name: "Supersim L2 A";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:9545"];
        };
    };
    sourceId: 900;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    readonly formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: `0x${string}`;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: `0x${string}`;
                mixHash: `0x${string}`;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentHash: `0x${string}`;
                receiptsRoot: `0x${string}`;
                sealFields: `0x${string}`[];
                sha3Uncles: `0x${string}`;
                size: bigint;
                stateRoot: `0x${string}`;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                transactionsRoot: `0x${string}`;
                uncles: `0x${string}`[];
                withdrawals?: import("viem").Withdrawal[] | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            };
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean | undefined;
                mint?: bigint | undefined;
                sourceHash: `0x${string}`;
                type: "deposit";
            } | {
                r: `0x${string}`;
                s: `0x${string}`;
                v: bigint;
                to: `0x${string}` | null;
                from: `0x${string}`;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: `0x${string}`;
                input: `0x${string}`;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                accessList?: undefined;
                blobVersionedHashes?: undefined;
                chainId?: number | undefined;
                yParity?: undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes: readonly `0x${string}`[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            };
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: `0x${string}`;
                blockNumber: bigint;
                contractAddress: `0x${string}` | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: `0x${string}`;
                gasUsed: bigint;
                logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                logsBloom: `0x${string}`;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: `0x${string}` | null;
                transactionHash: `0x${string}`;
                transactionIndex: number;
                type: import("viem").TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            };
            type: "transactionReceipt";
        };
    };
    readonly serializers: {
        readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
    };
}, import("viem").PrivateKeyAccount>>;
export declare const testClientA: {
    mode: "anvil";
    account: undefined;
    batch?: {
        multicall?: boolean | {
            batchSize?: number | undefined;
            wait?: number | undefined;
        } | undefined;
    } | undefined;
    cacheTime: number;
    ccipRead?: false | {
        request?: ((parameters: import("viem").CcipRequestParameters) => Promise<`0x${string}`>) | undefined;
    } | undefined;
    chain: {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    };
    key: string;
    name: string;
    pollingInterval: number;
    request: import("viem").EIP1193RequestFn<import("viem").TestRpcSchema<"anvil">>;
    transport: import("viem").TransportConfig<"http", import("viem").EIP1193RequestFn> & {
        fetchOptions?: Omit<RequestInit, "body"> | undefined;
        url?: string | undefined;
    };
    type: string;
    uid: string;
    dropTransaction: (args: import("viem").DropTransactionParameters) => Promise<void>;
    dumpState: () => Promise<`0x${string}`>;
    getAutomine: () => Promise<boolean>;
    getTxpoolContent: () => Promise<import("viem").GetTxpoolContentReturnType>;
    getTxpoolStatus: () => Promise<import("viem").GetTxpoolStatusReturnType>;
    impersonateAccount: (args: import("viem").ImpersonateAccountParameters) => Promise<void>;
    increaseTime: (args: import("viem").IncreaseTimeParameters) => Promise<`0x${string}`>;
    inspectTxpool: () => Promise<import("viem").InspectTxpoolReturnType>;
    loadState: (args: import("viem").LoadStateParameters) => Promise<void>;
    mine: (args: import("viem").MineParameters) => Promise<void>;
    removeBlockTimestampInterval: () => Promise<void>;
    reset: (args?: import("viem").ResetParameters | undefined) => Promise<void>;
    revert: (args: import("viem").RevertParameters) => Promise<void>;
    sendUnsignedTransaction: <chain extends import("viem").Chain | undefined>(args: import("viem").SendUnsignedTransactionParameters<chain>) => Promise<`0x${string}`>;
    setAutomine: (args: boolean) => Promise<void>;
    setBalance: (args: import("viem").SetBalanceParameters) => Promise<void>;
    setBlockGasLimit: (args: import("viem").SetBlockGasLimitParameters) => Promise<void>;
    setBlockTimestampInterval: (args: import("viem").SetBlockTimestampIntervalParameters) => Promise<void>;
    setCode: (args: import("viem").SetCodeParameters) => Promise<void>;
    setCoinbase: (args: import("viem").SetCoinbaseParameters) => Promise<void>;
    setIntervalMining: (args: import("viem").SetIntervalMiningParameters) => Promise<void>;
    setLoggingEnabled: (args: boolean) => Promise<void>;
    setMinGasPrice: (args: import("viem").SetMinGasPriceParameters) => Promise<void>;
    setNextBlockBaseFeePerGas: (args: import("viem").SetNextBlockBaseFeePerGasParameters) => Promise<void>;
    setNextBlockTimestamp: (args: import("viem").SetNextBlockTimestampParameters) => Promise<void>;
    setNonce: (args: import("viem").SetNonceParameters) => Promise<void>;
    setRpcUrl: (args: string) => Promise<void>;
    setStorageAt: (args: import("viem").SetStorageAtParameters) => Promise<void>;
    snapshot: () => Promise<`0x${string}`>;
    stopImpersonatingAccount: (args: import("viem").StopImpersonatingAccountParameters) => Promise<void>;
    extend: <const client extends {
        [x: string]: unknown;
        account?: undefined;
        batch?: undefined;
        cacheTime?: undefined;
        ccipRead?: undefined;
        chain?: undefined;
        key?: undefined;
        name?: undefined;
        pollingInterval?: undefined;
        request?: undefined;
        transport?: undefined;
        type?: undefined;
        uid?: undefined;
    } & import("viem").ExactPartial<Pick<import("viem").PublicActions<import("viem").HttpTransport, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined>, "call" | "createContractEventFilter" | "createEventFilter" | "estimateContractGas" | "estimateGas" | "getBlock" | "getBlockNumber" | "getChainId" | "getContractEvents" | "getEnsText" | "getFilterChanges" | "getGasPrice" | "getLogs" | "getTransaction" | "getTransactionCount" | "getTransactionReceipt" | "prepareTransactionRequest" | "readContract" | "sendRawTransaction" | "simulateContract" | "uninstallFilter" | "watchBlockNumber" | "watchContractEvent"> & Pick<import("viem").WalletActions<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined>, "sendTransaction" | "writeContract">>>(fn: (client: import("viem").Client<import("viem").HttpTransport, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, import("viem").TestRpcSchema<"anvil">, import("viem").TestActions>) => client) => import("viem").Client<import("viem").HttpTransport, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, import("viem").TestRpcSchema<"anvil">, { [K in keyof client]: client[K]; } & import("viem").TestActions>;
};
/** Chain B **/
export declare const publicClientB: import("viem").Client<import("viem").HttpTransport, {
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined;
    contracts: {
        readonly opChainProxyAdmin: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly addressManager: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1Erc721BridgeProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly systemConfig: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismMintableErc20FactoryProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1StandardBridge: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1CrossDomainMessenger: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismPortal: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly disputeGameFactory: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly anchorStateRegistry: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly faultDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly permissionedDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    id: 902;
    name: "Supersim L2 B";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:9546"];
        };
    };
    sourceId: 900;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    readonly formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: `0x${string}`;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: `0x${string}`;
                mixHash: `0x${string}`;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentHash: `0x${string}`;
                receiptsRoot: `0x${string}`;
                sealFields: `0x${string}`[];
                sha3Uncles: `0x${string}`;
                size: bigint;
                stateRoot: `0x${string}`;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                transactionsRoot: `0x${string}`;
                uncles: `0x${string}`[];
                withdrawals?: import("viem").Withdrawal[] | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            };
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean | undefined;
                mint?: bigint | undefined;
                sourceHash: `0x${string}`;
                type: "deposit";
            } | {
                r: `0x${string}`;
                s: `0x${string}`;
                v: bigint;
                to: `0x${string}` | null;
                from: `0x${string}`;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: `0x${string}`;
                input: `0x${string}`;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                accessList?: undefined;
                blobVersionedHashes?: undefined;
                chainId?: number | undefined;
                yParity?: undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes: readonly `0x${string}`[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            };
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: `0x${string}`;
                blockNumber: bigint;
                contractAddress: `0x${string}` | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: `0x${string}`;
                gasUsed: bigint;
                logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                logsBloom: `0x${string}`;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: `0x${string}` | null;
                transactionHash: `0x${string}`;
                transactionIndex: number;
                type: import("viem").TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            };
            type: "transactionReceipt";
        };
    };
    readonly serializers: {
        readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
    };
}, undefined, import("viem").PublicRpcSchema, {
    buildDepositTransaction: <chainOverride extends import("viem").Chain | undefined = undefined, accountOverride extends `0x${string}` | import("viem").Account | undefined = undefined>(parameters: import("viem/op-stack").BuildDepositTransactionParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride, accountOverride>) => Promise<import("viem/op-stack").BuildDepositTransactionReturnType<undefined, accountOverride>>;
    buildProveWithdrawal: <chainOverride_1 extends import("viem").Chain | undefined = undefined, accountOverride_1 extends `0x${string}` | import("viem").Account | undefined = undefined>(parameters: import("viem/op-stack").BuildProveWithdrawalParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_1, accountOverride_1>) => Promise<{
        l2OutputIndex: bigint;
        outputRootProof: {
            version: `0x${string}`;
            stateRoot: `0x${string}`;
            messagePasserStorageRoot: `0x${string}`;
            latestBlockhash: `0x${string}`;
        };
        withdrawalProof: readonly `0x${string}`[];
        withdrawal: {
            data: `0x${string}`;
            gasLimit: bigint;
            nonce: bigint;
            sender: `0x${string}`;
            target: `0x${string}`;
            value: bigint;
        };
        account: import("viem").DeriveAccount<undefined, accountOverride_1>;
        targetChain: import("viem").DeriveChain<{
            blockExplorers?: {
                [key: string]: {
                    name: string;
                    url: string;
                    apiUrl?: string | undefined;
                };
                default: {
                    name: string;
                    url: string;
                    apiUrl?: string | undefined;
                };
            } | undefined;
            contracts: {
                readonly opChainProxyAdmin: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly addressManager: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly l1Erc721BridgeProxy: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly systemConfig: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly optimismMintableErc20FactoryProxy: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly l1StandardBridge: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly l1CrossDomainMessenger: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly optimismPortal: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly disputeGameFactory: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly anchorStateRegistry: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly faultDisputeGame: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly permissionedDisputeGame: {
                    [x: number]: {
                        address: `0x${string}`;
                    };
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 902;
            name: "Supersim L2 B";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["http://127.0.0.1:9546"];
                };
            };
            sourceId: 900;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            readonly formatters: {
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint;
                        excessBlobGas: bigint;
                        extraData: `0x${string}`;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: `0x${string}`;
                        mixHash: `0x${string}`;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentHash: `0x${string}`;
                        receiptsRoot: `0x${string}`;
                        sealFields: `0x${string}`[];
                        sha3Uncles: `0x${string}`;
                        size: bigint;
                        stateRoot: `0x${string}`;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                        transactionsRoot: `0x${string}`;
                        uncles: `0x${string}`[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: `0x${string}` | undefined;
                    };
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                        type: "deposit";
                    } | {
                        r: `0x${string}`;
                        s: `0x${string}`;
                        v: bigint;
                        to: `0x${string}` | null;
                        from: `0x${string}`;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        accessList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        blobVersionedHashes: readonly `0x${string}`[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    };
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                        blobGasPrice?: bigint | undefined;
                        blobGasUsed?: bigint | undefined;
                        blockHash: `0x${string}`;
                        blockNumber: bigint;
                        contractAddress: `0x${string}` | null | undefined;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: `0x${string}`;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                        logsBloom: `0x${string}`;
                        root?: `0x${string}` | undefined;
                        status: "success" | "reverted";
                        to: `0x${string}` | null;
                        transactionHash: `0x${string}`;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    };
                    type: "transactionReceipt";
                };
            };
            readonly serializers: {
                readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
            };
        }, chainOverride_1>;
    }>;
    estimateContractL1Fee: <const abi extends readonly unknown[] | import("viem").Abi, functionName extends import("viem").ContractFunctionName<abi, "payable" | "nonpayable">, args extends import("viem").ContractFunctionArgs<abi, "view" | "pure", functionName>, chainOverride_2 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateContractL1FeeParameters<abi, functionName, args, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_2>) => Promise<bigint>;
    estimateContractL1Gas: <const abi_1 extends readonly unknown[] | import("viem").Abi, functionName_1 extends import("viem").ContractFunctionName<abi_1, "payable" | "nonpayable">, args_1 extends import("viem").ContractFunctionArgs<abi_1, "view" | "pure", functionName_1>, chainOverride_3 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateContractL1GasParameters<abi_1, functionName_1, args_1, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_3>) => Promise<bigint>;
    estimateContractTotalFee: <const abi_2 extends readonly unknown[] | import("viem").Abi, functionName_2 extends import("viem").ContractFunctionName<abi_2, "payable" | "nonpayable">, args_2 extends import("viem").ContractFunctionArgs<abi_2, "view" | "pure", functionName_2>, chainOverride_4 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateContractTotalFeeParameters<abi_2, functionName_2, args_2, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_4>) => Promise<bigint>;
    estimateContractTotalGas: <const abi_3 extends readonly unknown[] | import("viem").Abi, functionName_3 extends import("viem").ContractFunctionName<abi_3, "payable" | "nonpayable">, args_3 extends import("viem").ContractFunctionArgs<abi_3, "view" | "pure", functionName_3>, chainOverride_5 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateContractTotalGasParameters<abi_3, functionName_3, args_3, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_5>) => Promise<bigint>;
    estimateInitiateWithdrawalGas: <chainOverride_6 extends import("viem").Chain | undefined = undefined>(parameters: import("node_modules/viem/_types/op-stack/actions/estimateInitiateWithdrawalGas.js").EstimateInitiateWithdrawalGasParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_6>) => Promise<bigint>;
    estimateL1Fee: <chainOverride_7 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateL1FeeParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_7>) => Promise<bigint>;
    getL1BaseFee: <chainOverride_8 extends import("viem").Chain | undefined = undefined>(parameters?: import("viem/op-stack").GetL1BaseFeeParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, chainOverride_8> | undefined) => Promise<bigint>;
    estimateL1Gas: <chainOverride_9 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateL1GasParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_9>) => Promise<bigint>;
    estimateTotalFee: <chainOverride_10 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateTotalFeeParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_10>) => Promise<bigint>;
    estimateTotalGas: <chainOverride_11 extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").EstimateTotalGasParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, chainOverride_11>) => Promise<bigint>;
    interop: import("../decorators/publicL2.js").PublicInteropActionsL2<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined>;
} & import("viem").PublicActions<import("viem").HttpTransport, {
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined;
    contracts: {
        readonly opChainProxyAdmin: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly addressManager: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1Erc721BridgeProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly systemConfig: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismMintableErc20FactoryProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1StandardBridge: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1CrossDomainMessenger: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismPortal: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly disputeGameFactory: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly anchorStateRegistry: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly faultDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly permissionedDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    id: 902;
    name: "Supersim L2 B";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:9546"];
        };
    };
    sourceId: 900;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    readonly formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: `0x${string}`;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: `0x${string}`;
                mixHash: `0x${string}`;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentHash: `0x${string}`;
                receiptsRoot: `0x${string}`;
                sealFields: `0x${string}`[];
                sha3Uncles: `0x${string}`;
                size: bigint;
                stateRoot: `0x${string}`;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                transactionsRoot: `0x${string}`;
                uncles: `0x${string}`[];
                withdrawals?: import("viem").Withdrawal[] | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            };
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean | undefined;
                mint?: bigint | undefined;
                sourceHash: `0x${string}`;
                type: "deposit";
            } | {
                r: `0x${string}`;
                s: `0x${string}`;
                v: bigint;
                to: `0x${string}` | null;
                from: `0x${string}`;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: `0x${string}`;
                input: `0x${string}`;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                accessList?: undefined;
                blobVersionedHashes?: undefined;
                chainId?: number | undefined;
                yParity?: undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes: readonly `0x${string}`[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            };
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: `0x${string}`;
                blockNumber: bigint;
                contractAddress: `0x${string}` | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: `0x${string}`;
                gasUsed: bigint;
                logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                logsBloom: `0x${string}`;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: `0x${string}` | null;
                transactionHash: `0x${string}`;
                transactionIndex: number;
                type: import("viem").TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            };
            type: "transactionReceipt";
        };
    };
    readonly serializers: {
        readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
    };
}>>;
export declare const walletClientB: import("viem").Client<import("viem").HttpTransport, {
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined;
    contracts: {
        readonly opChainProxyAdmin: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly addressManager: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1Erc721BridgeProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly systemConfig: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismMintableErc20FactoryProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1StandardBridge: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1CrossDomainMessenger: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismPortal: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly disputeGameFactory: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly anchorStateRegistry: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly faultDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly permissionedDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    id: 902;
    name: "Supersim L2 B";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:9546"];
        };
    };
    sourceId: 900;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    readonly formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: `0x${string}`;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: `0x${string}`;
                mixHash: `0x${string}`;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentHash: `0x${string}`;
                receiptsRoot: `0x${string}`;
                sealFields: `0x${string}`[];
                sha3Uncles: `0x${string}`;
                size: bigint;
                stateRoot: `0x${string}`;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                transactionsRoot: `0x${string}`;
                uncles: `0x${string}`[];
                withdrawals?: import("viem").Withdrawal[] | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            };
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean | undefined;
                mint?: bigint | undefined;
                sourceHash: `0x${string}`;
                type: "deposit";
            } | {
                r: `0x${string}`;
                s: `0x${string}`;
                v: bigint;
                to: `0x${string}` | null;
                from: `0x${string}`;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: `0x${string}`;
                input: `0x${string}`;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                accessList?: undefined;
                blobVersionedHashes?: undefined;
                chainId?: number | undefined;
                yParity?: undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes: readonly `0x${string}`[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            };
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: `0x${string}`;
                blockNumber: bigint;
                contractAddress: `0x${string}` | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: `0x${string}`;
                gasUsed: bigint;
                logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                logsBloom: `0x${string}`;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: `0x${string}` | null;
                transactionHash: `0x${string}`;
                transactionIndex: number;
                type: import("viem").TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            };
            type: "transactionReceipt";
        };
    };
    readonly serializers: {
        readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
    };
}, import("viem").PrivateKeyAccount, import("viem").WalletRpcSchema, {
    initiateWithdrawal: <chainOverride extends import("viem").Chain | undefined = undefined>(parameters: import("viem/op-stack").InitiateWithdrawalParameters<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, import("viem").PrivateKeyAccount, chainOverride>) => Promise<`0x${string}`>;
    interop: import("../decorators/walletL2.js").WalletInteropActionsL2<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 902;
        name: "Supersim L2 B";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9546"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, import("viem").PrivateKeyAccount>;
} & import("viem").WalletActions<{
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined;
    contracts: {
        readonly opChainProxyAdmin: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly addressManager: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1Erc721BridgeProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly systemConfig: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismMintableErc20FactoryProxy: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1StandardBridge: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly l1CrossDomainMessenger: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly optimismPortal: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly disputeGameFactory: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly anchorStateRegistry: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly faultDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly permissionedDisputeGame: {
            [x: number]: {
                address: `0x${string}`;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    id: 902;
    name: "Supersim L2 B";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:9546"];
        };
    };
    sourceId: 900;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    readonly formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: `0x${string}`;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: `0x${string}`;
                mixHash: `0x${string}`;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentHash: `0x${string}`;
                receiptsRoot: `0x${string}`;
                sealFields: `0x${string}`[];
                sha3Uncles: `0x${string}`;
                size: bigint;
                stateRoot: `0x${string}`;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                transactionsRoot: `0x${string}`;
                uncles: `0x${string}`[];
                withdrawals?: import("viem").Withdrawal[] | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            };
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean | undefined;
                mint?: bigint | undefined;
                sourceHash: `0x${string}`;
                type: "deposit";
            } | {
                r: `0x${string}`;
                s: `0x${string}`;
                v: bigint;
                to: `0x${string}` | null;
                from: `0x${string}`;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: `0x${string}`;
                input: `0x${string}`;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                accessList?: undefined;
                blobVersionedHashes?: undefined;
                chainId?: number | undefined;
                yParity?: undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas?: undefined;
                maxPriorityFeePerGas?: undefined;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes?: undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined;
                maxFeePerBlobGas?: undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: `0x${string}`;
                gas: bigint;
                hash: `0x${string}`;
                input: `0x${string}`;
                nonce: number;
                r: `0x${string}`;
                s: `0x${string}`;
                to: `0x${string}` | null;
                transactionIndex: number | null;
                typeHex: `0x${string}` | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import("viem").AccessList;
                blobVersionedHashes: readonly `0x${string}`[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined;
                mint?: undefined;
                sourceHash?: undefined;
            };
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: `0x${string}`;
                blockNumber: bigint;
                contractAddress: `0x${string}` | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: `0x${string}`;
                gasUsed: bigint;
                logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                logsBloom: `0x${string}`;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: `0x${string}` | null;
                transactionHash: `0x${string}`;
                transactionIndex: number;
                type: import("viem").TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            };
            type: "transactionReceipt";
        };
    };
    readonly serializers: {
        readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
    };
}, import("viem").PrivateKeyAccount>>;
export declare const testClientB: {
    mode: "anvil";
    account: undefined;
    batch?: {
        multicall?: boolean | {
            batchSize?: number | undefined;
            wait?: number | undefined;
        } | undefined;
    } | undefined;
    cacheTime: number;
    ccipRead?: false | {
        request?: ((parameters: import("viem").CcipRequestParameters) => Promise<`0x${string}`>) | undefined;
    } | undefined;
    chain: {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    };
    key: string;
    name: string;
    pollingInterval: number;
    request: import("viem").EIP1193RequestFn<import("viem").TestRpcSchema<"anvil">>;
    transport: import("viem").TransportConfig<"http", import("viem").EIP1193RequestFn> & {
        fetchOptions?: Omit<RequestInit, "body"> | undefined;
        url?: string | undefined;
    };
    type: string;
    uid: string;
    dropTransaction: (args: import("viem").DropTransactionParameters) => Promise<void>;
    dumpState: () => Promise<`0x${string}`>;
    getAutomine: () => Promise<boolean>;
    getTxpoolContent: () => Promise<import("viem").GetTxpoolContentReturnType>;
    getTxpoolStatus: () => Promise<import("viem").GetTxpoolStatusReturnType>;
    impersonateAccount: (args: import("viem").ImpersonateAccountParameters) => Promise<void>;
    increaseTime: (args: import("viem").IncreaseTimeParameters) => Promise<`0x${string}`>;
    inspectTxpool: () => Promise<import("viem").InspectTxpoolReturnType>;
    loadState: (args: import("viem").LoadStateParameters) => Promise<void>;
    mine: (args: import("viem").MineParameters) => Promise<void>;
    removeBlockTimestampInterval: () => Promise<void>;
    reset: (args?: import("viem").ResetParameters | undefined) => Promise<void>;
    revert: (args: import("viem").RevertParameters) => Promise<void>;
    sendUnsignedTransaction: <chain extends import("viem").Chain | undefined>(args: import("viem").SendUnsignedTransactionParameters<chain>) => Promise<`0x${string}`>;
    setAutomine: (args: boolean) => Promise<void>;
    setBalance: (args: import("viem").SetBalanceParameters) => Promise<void>;
    setBlockGasLimit: (args: import("viem").SetBlockGasLimitParameters) => Promise<void>;
    setBlockTimestampInterval: (args: import("viem").SetBlockTimestampIntervalParameters) => Promise<void>;
    setCode: (args: import("viem").SetCodeParameters) => Promise<void>;
    setCoinbase: (args: import("viem").SetCoinbaseParameters) => Promise<void>;
    setIntervalMining: (args: import("viem").SetIntervalMiningParameters) => Promise<void>;
    setLoggingEnabled: (args: boolean) => Promise<void>;
    setMinGasPrice: (args: import("viem").SetMinGasPriceParameters) => Promise<void>;
    setNextBlockBaseFeePerGas: (args: import("viem").SetNextBlockBaseFeePerGasParameters) => Promise<void>;
    setNextBlockTimestamp: (args: import("viem").SetNextBlockTimestampParameters) => Promise<void>;
    setNonce: (args: import("viem").SetNonceParameters) => Promise<void>;
    setRpcUrl: (args: string) => Promise<void>;
    setStorageAt: (args: import("viem").SetStorageAtParameters) => Promise<void>;
    snapshot: () => Promise<`0x${string}`>;
    stopImpersonatingAccount: (args: import("viem").StopImpersonatingAccountParameters) => Promise<void>;
    extend: <const client extends {
        [x: string]: unknown;
        account?: undefined;
        batch?: undefined;
        cacheTime?: undefined;
        ccipRead?: undefined;
        chain?: undefined;
        key?: undefined;
        name?: undefined;
        pollingInterval?: undefined;
        request?: undefined;
        transport?: undefined;
        type?: undefined;
        uid?: undefined;
    } & import("viem").ExactPartial<Pick<import("viem").PublicActions<import("viem").HttpTransport, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined>, "call" | "createContractEventFilter" | "createEventFilter" | "estimateContractGas" | "estimateGas" | "getBlock" | "getBlockNumber" | "getChainId" | "getContractEvents" | "getEnsText" | "getFilterChanges" | "getGasPrice" | "getLogs" | "getTransaction" | "getTransactionCount" | "getTransactionReceipt" | "prepareTransactionRequest" | "readContract" | "sendRawTransaction" | "simulateContract" | "uninstallFilter" | "watchBlockNumber" | "watchContractEvent"> & Pick<import("viem").WalletActions<{
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined>, "sendTransaction" | "writeContract">>>(fn: (client: import("viem").Client<import("viem").HttpTransport, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, import("viem").TestRpcSchema<"anvil">, import("viem").TestActions>) => client) => import("viem").Client<import("viem").HttpTransport, {
        blockExplorers?: {
            [key: string]: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
            default: {
                name: string;
                url: string;
                apiUrl?: string | undefined;
            };
        } | undefined;
        contracts: {
            readonly opChainProxyAdmin: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly addressManager: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1Erc721BridgeProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly systemConfig: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismMintableErc20FactoryProxy: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1StandardBridge: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly l1CrossDomainMessenger: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly optimismPortal: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly disputeGameFactory: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly anchorStateRegistry: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly faultDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly permissionedDisputeGame: {
                [x: number]: {
                    address: `0x${string}`;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 901;
        name: "Supersim L2 A";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["http://127.0.0.1:9545"];
            };
        };
        sourceId: 900;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: import("viem").ChainFees<undefined> | undefined;
        readonly formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcBlock<import("viem").BlockTag, boolean>) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: `0x${string}`;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: `0x${string}`;
                    mixHash: `0x${string}`;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentHash: `0x${string}`;
                    receiptsRoot: `0x${string}`;
                    sealFields: `0x${string}`[];
                    sha3Uncles: `0x${string}`;
                    size: bigint;
                    stateRoot: `0x${string}`;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                    transactionsRoot: `0x${string}`;
                    uncles: `0x${string}`[];
                    withdrawals?: import("viem").Withdrawal[] | undefined;
                    withdrawalsRoot?: `0x${string}` | undefined;
                };
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransaction<boolean>) => {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean | undefined;
                    mint?: bigint | undefined;
                    sourceHash: `0x${string}`;
                    type: "deposit";
                } | {
                    r: `0x${string}`;
                    s: `0x${string}`;
                    v: bigint;
                    to: `0x${string}` | null;
                    from: `0x${string}`;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    accessList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: `0x${string}`;
                    gas: bigint;
                    hash: `0x${string}`;
                    input: `0x${string}`;
                    nonce: number;
                    r: `0x${string}`;
                    s: `0x${string}`;
                    to: `0x${string}` | null;
                    transactionIndex: number | null;
                    typeHex: `0x${string}` | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: import("viem").AccessList;
                    blobVersionedHashes: readonly `0x${string}`[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                };
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: `0x${string}`;
                    blockNumber: bigint;
                    contractAddress: `0x${string}` | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: `0x${string}`;
                    gasUsed: bigint;
                    logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                    logsBloom: `0x${string}`;
                    root?: `0x${string}` | undefined;
                    status: "success" | "reverted";
                    to: `0x${string}` | null;
                    transactionHash: `0x${string}`;
                    transactionIndex: number;
                    type: import("viem").TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                };
                type: "transactionReceipt";
            };
        };
        readonly serializers: {
            readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
        };
    }, undefined, import("viem").TestRpcSchema<"anvil">, { [K in keyof client]: client[K]; } & import("viem").TestActions>;
};
