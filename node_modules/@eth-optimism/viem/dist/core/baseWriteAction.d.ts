import type { Abi, AbiStateMutability, Account, Address, Chain, Client, ContractFunctionArgs, ContractFunctionName, DeriveChain, FormattedTransactionRequest, GetChainParameter, Hash, Transport, UnionOmit } from 'viem';
import type { GetAccountParameter, UnionEvaluate } from '../types/utils.js';
export type BaseWriteContractActionParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<derivedChain>, 'blobs' | 'data' | 'from' | 'gas' | 'maxFeePerBlobGas' | 'gasPrice' | 'to' | 'type'>> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
    /** Gas limit for transaction execution on the L1. `null` to skip gas estimation & defer calculation to signer. */
    gas?: bigint | null | undefined;
};
export type ContractParameters = {
    abi: Abi;
    contractAddress: Address;
    contractFunctionName: ContractFunctionName<Abi, AbiStateMutability>;
    contractArgs: ContractFunctionArgs<Abi, AbiStateMutability, ContractFunctionName<Abi, AbiStateMutability>>;
};
export declare function baseWriteAction<TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined, TChainOverride extends Chain | undefined = Chain | undefined, TDerivedChain extends Chain | undefined = DeriveChain<TChain, TChainOverride>>(client: Client<Transport, TChain, TAccount>, contractParameters: ContractParameters, parameters: BaseWriteContractActionParameters<TChain, TAccount, TChainOverride, TDerivedChain>): Promise<Hash>;
