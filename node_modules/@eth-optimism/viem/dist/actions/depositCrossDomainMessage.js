import { estimateContractGas, simulateContract } from 'viem/actions';
import { crossDomainMessengerAbi } from '../abis.js';
import { baseWriteAction, } from '../core/baseWriteAction.js';
/**
 * Deposit a cross-domain message from the root chain (L1).
 * @category Actions
 * @param client - Client for the depositing chain
 * @param parameters - {@link DepositCrossDomainMessageParameters}
 * @returns The transaction hash. {@link DepositCrossDomainMessageReturnType}
 */
export async function depositCrossDomainMessage(client, parameters) {
    const { chain = client.chain, target, message, targetChain, minGasLimit = 0n, } = parameters;
    const cdmAddress = (() => {
        if (parameters.l1CrossDomainMessengerAddress)
            return parameters.l1CrossDomainMessengerAddress;
        if (chain)
            return targetChain.contracts.l1CrossDomainMessenger[chain.id].address;
        return Object.values(targetChain.contracts.l1CrossDomainMessenger)[0]
            .address;
    })();
    return baseWriteAction(client, {
        abi: crossDomainMessengerAbi,
        contractAddress: cdmAddress,
        contractFunctionName: 'sendMessage',
        contractArgs: [target, message, minGasLimit],
    }, parameters);
}
/**
 * Simulate the {@link depositCrossDomainMessage} action.
 * @category Actions
 * @param client - Client for the depositing chain
 * @param parameters - {@link DepositCrossDomainMessageParameters}
 * @returns The contract functions return value. {@link DepositCrossDomainMessageContractReturnType}
 */
export async function simulateDepositCrossDomainMessage(client, parameters) {
    const { chain = client.chain, target, message, targetChain, minGasLimit = 0n, } = parameters;
    const cdmAddress = (() => {
        if (parameters.l1CrossDomainMessengerAddress)
            return parameters.l1CrossDomainMessengerAddress;
        if (chain)
            return targetChain.contracts.l1CrossDomainMessenger[chain.id].address;
        return Object.values(targetChain.contracts.l1CrossDomainMessenger)[0]
            .address;
    })();
    const { result } = await simulateContract(client, {
        abi: crossDomainMessengerAbi,
        address: cdmAddress,
        functionName: 'sendMessage',
        args: [target, message, minGasLimit],
        ...parameters,
    });
    return result;
}
/**
 * Estimate the gas cost of the {@link depositCrossDomainMessage} action.
 * @category Actions
 * @param client - Client for the depositing chain
 * @param parameters - {@link DepositCrossDomainMessageParameters}
 * @returns The gas cost
 */
export async function estimateDepositCrossDomainMessageGas(client, parameters) {
    const { chain = client.chain, target, message, targetChain, minGasLimit = 0n, } = parameters;
    const cdmAddress = (() => {
        if (parameters.l1CrossDomainMessengerAddress)
            return parameters.l1CrossDomainMessengerAddress;
        if (chain)
            return targetChain.contracts.l1CrossDomainMessenger[chain.id].address;
        return Object.values(targetChain.contracts.l1CrossDomainMessenger)[0]
            .address;
    })();
    return estimateContractGas(client, {
        abi: crossDomainMessengerAbi,
        address: cdmAddress,
        functionName: 'sendMessage',
        args: [target, message, minGasLimit],
        ...parameters,
    });
}
//# sourceMappingURL=depositCrossDomainMessage.js.map