import { estimateContractGas, simulateContract } from 'viem/actions';
import { superchainETHBridgeAbi } from '../../abis.js';
import { contracts } from '../../contracts.js';
import { baseWriteAction } from '../../core/baseWriteAction.js';
/**
 * Sends ETH to the specified recipient on the destination chain
 * @category Actions
 * @param client - L2 Client
 * @param parameters - {@link SendETHParameters}
 * @returns transaction hash - {@link SendETHContractReturnType}
 */
export async function sendETH(client, parameters) {
    const { to, chainId, ...txParameters } = parameters;
    return baseWriteAction(client, {
        abi: superchainETHBridgeAbi,
        contractAddress: contracts.superchainETHBridge.address,
        contractFunctionName: 'sendETH',
        contractArgs: [to, chainId],
    }, txParameters);
}
/**
 * Estimates gas for {@link sendETH}
 * @category Actions
 * @param client - L2 Client
 * @param parameters - {@link SendETHParameters}
 * @returns estimated gas value.
 */
export async function estimateSendETHGas(client, parameters) {
    const { to, chainId, ...txParameters } = parameters;
    return estimateContractGas(client, {
        abi: superchainETHBridgeAbi,
        address: contracts.superchainETHBridge.address,
        functionName: 'sendETH',
        args: [to, chainId],
        ...txParameters,
    });
}
/**
 * Simulate contract call for {@link sendETH}
 * @category Actions
 * @param client - L2 Client
 * @param parameters - {@link SendETHParameters}
 * @returns contract return value - {@link SendETHContractReturnType}
 */
export async function simulateSendETH(client, parameters) {
    const { account, value, to, chainId } = parameters;
    const res = await simulateContract(client, {
        account,
        abi: superchainETHBridgeAbi,
        address: contracts.superchainETHBridge.address,
        chain: client.chain,
        functionName: 'sendETH',
        args: [to, chainId],
        value,
    });
    return res.result;
}
//# sourceMappingURL=sendETH.js.map