import { BaseError } from 'viem';
import { getChainId, readContract } from 'viem/actions';
import { l2ToL2CrossDomainMessengerAbi } from '../../abis.js';
import { contracts } from '../../contracts.js';
import { hashCrossDomainMessage } from '../../utils/interop/hashCrossDomainMessage.js';
export class InvalidDestinationChainError extends BaseError {
    constructor(destination, chainId) {
        super(`Invalid destination chain: ${destination} !== ${chainId}`);
    }
}
/**
 * Get the status of a cross domain message
 * @category Actions
 * @param client - The client to use
 * @param parameters - {@link GetCrossDomainMessageStatusParameters}
 * @returns status -{@link GetCrossDomainMessageStatusReturnType}
 * @example
 * import { createPublicClient } from 'viem'
 * import { op, unichain } from '@eth-optimism/viem/chains'
 *
 * const publicClientOp = createPublicClient({ chain: op, transport: http() })
 * const publicClientUnichain = createPublicClient({ chain: unichain, transport: http() })
 *
 * const receipt = await publicClientOp.getTransactionReceipt({ hash: '0x...' })
 * const messages = await getCrossDomainMessages(publicClientOp, { logs: receipt.logs })
 *
 * const message = messages.filter((message) => message.destination === unichain.id)[0]
 * const status = await getCrossDomainMessageStatus(publicClientUnichain, { message })
 */
export async function getCrossDomainMessageStatus(client, parameters) {
    const { message } = parameters;
    const chainId = BigInt(await getChainId(client));
    if (chainId !== message.destination) {
        throw new InvalidDestinationChainError(message.destination, chainId);
    }
    const messageHash = hashCrossDomainMessage(message);
    const relayed = await readContract(client, {
        address: contracts.l2ToL2CrossDomainMessenger.address,
        abi: l2ToL2CrossDomainMessengerAbi,
        functionName: 'successfulMessages',
        args: [messageHash],
    });
    return relayed ? 'relayed' : 'ready-to-relay';
}
//# sourceMappingURL=getCrossDomainMessageStatus.js.map