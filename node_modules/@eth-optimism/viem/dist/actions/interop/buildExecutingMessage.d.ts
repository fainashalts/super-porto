import type { AccessList, Account, Chain, Client, Log, Transport } from 'viem';
import { BaseError } from 'viem';
import type { MessageIdentifier, MessagePayload } from '../../types/interop/executingMessage.js';
/**
 * @category Types
 */
export type BuildExecutingMessageParameters = {
    log: Log;
};
/**
 * @category Types
 */
export type BuildExecutingMessageReturnType = {
    id: MessageIdentifier;
    payload: MessagePayload;
    accessList: AccessList;
};
/**
 * @category Types
 */
export type ExecutingMessagePendingLogErrorType = ExecutingMessagePendingLogError & {
    name: 'ExecutingMessagePendingLogError';
};
export declare class ExecutingMessagePendingLogError extends BaseError {
    constructor(log: Log);
}
/**
 * Build an executing message from a log
 * @category Actions
 * @param client - client to the chain that emitted the log
 * @param params - {@link BuildExecutingMessageParameters}
 * @returns - {@link BuildExecutingMessageReturnType}
 * @example
 * import { createPublicClient } from 'viem'
 * import { http } from 'viem/transports'
 * import { op } from '@eth-optimism/viem/chains'
 *
 * const publicClientOp = createPublicClient({ chain: op, transport: http() })
 * const receipt = await publicClientOp.getTransactionReceipt({ hash: '0x...' })
 * const params = await buildExecutingMessage(publicClientOp, { log: receipt.logs[0] })
 */
export declare function buildExecutingMessage<TChain extends Chain | undefined, TAccount extends Account | undefined>(client: Client<Transport, TChain, TAccount>, params: BuildExecutingMessageParameters): Promise<BuildExecutingMessageReturnType>;
