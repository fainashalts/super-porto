import { estimateContractGas, simulateContract } from 'viem/actions';
import { l2ToL2CrossDomainMessengerAbi } from '../../abis.js';
import { contracts } from '../../contracts.js';
import { baseWriteAction } from '../../core/baseWriteAction.js';
/**
 * Initiates the intent of sending a L2 to L2 message. Used in the interop flow.
 * @category Actions
 * @param client - L2 Client
 * @param parameters - {@link SendCrossDomainMessageParameters}
 * @returns transaction hash - {@link SendCrossDomainMessageReturnType}
 */
export async function sendCrossDomainMessage(client, parameters) {
    const { destinationChainId, target, message, ...txParameters } = parameters;
    return baseWriteAction(client, {
        abi: l2ToL2CrossDomainMessengerAbi,
        contractAddress: contracts.l2ToL2CrossDomainMessenger.address,
        contractFunctionName: 'sendMessage',
        contractArgs: [destinationChainId, target, message],
    }, txParameters);
}
/**
 * Estimates gas for {@link sendMessage}
 * @category Actions
 * @param client - L2 Client
 * @param parameters - {@link SendCrossDomainMessageParameters}
 * @returns estimated gas value.
 */
export async function estimateSendCrossDomainMessageGas(client, parameters) {
    const { destinationChainId, target, message, ...txParameters } = parameters;
    return estimateContractGas(client, {
        abi: l2ToL2CrossDomainMessengerAbi,
        address: contracts.l2ToL2CrossDomainMessenger.address,
        functionName: 'sendMessage',
        args: [destinationChainId, target, message],
        ...txParameters,
    });
}
/**
 * Simulate contract call for {@link sendMessage}
 * @category Actions
 * @param client - L2 Client
 * @param parameters - {@link SendCrossDomainMessageParameters}
 * @returns contract return value - {@link SendCrossDomainMessageContractReturnType}
 */
export async function simulateSendCrossDomainMessage(client, parameters) {
    const { account, destinationChainId, target, message } = parameters;
    const res = await simulateContract(client, {
        account,
        abi: l2ToL2CrossDomainMessengerAbi,
        address: contracts.l2ToL2CrossDomainMessenger.address,
        chain: client.chain,
        functionName: 'sendMessage',
        args: [destinationChainId, target, message],
    });
    return res.result;
}
//# sourceMappingURL=sendCrossDomainMessage.js.map