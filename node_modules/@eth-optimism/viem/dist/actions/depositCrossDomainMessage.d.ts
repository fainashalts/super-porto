import type { Account, Address, Chain, Client, ContractFunctionReturnType, DeriveChain, GetChainParameter, Hash, Hex, Transport } from 'viem';
import { crossDomainMessengerAbi } from '../abis.js';
import { type BaseWriteContractActionParameters } from '../core/baseWriteAction.js';
import type { GetContractAddressParameter } from '../types/utils.js';
/**
 * Deposit a cross-domain message from the root chain (L1).
 * @category Actions
 * @param client - Client for the depositing chain
 * @param parameters - {@link DepositCrossDomainMessageParameters}
 * @returns The transaction hash. {@link DepositCrossDomainMessageReturnType}
 * @example
 * import { depositCrossDomainMessage } from '@eth-optimism/viem'
 * import { op } from '@eth-optimism/viem/chains'
 *
 * const hash = await depositCrossDomainMessage(client, {
 *   target: '0x0000000000000000000000000000000000000000',
 *   message: '0x',
 *   targetChain: op,
 * })
 */
export type DepositCrossDomainMessageParameters<TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined, TDerivedChain extends Chain | undefined = DeriveChain<TChain, TChainOverride>> = GetChainParameter<TChain, TChainOverride> & GetContractAddressParameter<TDerivedChain, 'l1CrossDomainMessenger'> & BaseWriteContractActionParameters<TChain, TAccount, TChainOverride, TDerivedChain> & {
    /** The address of the target contract */
    target: Address;
    /** The calldata to invoke the target with */
    message: Hex;
    /** The value to send with the transaction */
    value: bigint;
    /** The minimum gas limit for the transaction */
    minGasLimit?: bigint;
};
export type DepositCrossDomainMessageReturnType = Hash;
export type DepositCrossDomainMessageContractReturnType = ContractFunctionReturnType<typeof crossDomainMessengerAbi, 'payable', 'sendMessage'>;
/**
 * Deposit a cross-domain message from the root chain (L1).
 * @category Actions
 * @param client - Client for the depositing chain
 * @param parameters - {@link DepositCrossDomainMessageParameters}
 * @returns The transaction hash. {@link DepositCrossDomainMessageReturnType}
 */
export declare function depositCrossDomainMessage<TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined>(client: Client<Transport, TChain, TAccount>, parameters: DepositCrossDomainMessageParameters<TChain, TAccount, TChainOverride>): Promise<DepositCrossDomainMessageReturnType>;
/**
 * Simulate the {@link depositCrossDomainMessage} action.
 * @category Actions
 * @param client - Client for the depositing chain
 * @param parameters - {@link DepositCrossDomainMessageParameters}
 * @returns The contract functions return value. {@link DepositCrossDomainMessageContractReturnType}
 */
export declare function simulateDepositCrossDomainMessage<TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined>(client: Client<Transport, TChain, TAccount>, parameters: DepositCrossDomainMessageParameters<TChain, TAccount, TChainOverride>): Promise<DepositCrossDomainMessageContractReturnType>;
/**
 * Estimate the gas cost of the {@link depositCrossDomainMessage} action.
 * @category Actions
 * @param client - Client for the depositing chain
 * @param parameters - {@link DepositCrossDomainMessageParameters}
 * @returns The gas cost
 */
export declare function estimateDepositCrossDomainMessageGas<TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined>(client: Client<Transport, TChain, TAccount>, parameters: DepositCrossDomainMessageParameters<TChain, TAccount, TChainOverride>): Promise<bigint>;
