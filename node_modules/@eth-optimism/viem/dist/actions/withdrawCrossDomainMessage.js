import { estimateContractGas, simulateContract } from 'viem/actions';
import { crossDomainMessengerAbi } from '../abis.js';
import { contracts } from '../contracts.js';
import { baseWriteAction } from '../core/baseWriteAction.js';
/**
 * Withdraw a cross-domain message from the child chain (L2).
 * @category Actions
 * @param client - Client for the withdrawing chain
 * @param parameters - {@link WithdrawCrossDomainMessageParameters}
 * @returns The transaction hash. {@link WithdrawCrossDomainMessageReturnType}
 */
export async function withdrawCrossDomainMessage(client, parameters) {
    const { target, message, minGasLimit = 0n } = parameters;
    const cdmAddress = parameters.crossDomainMessengerAddress ??
        contracts.l2CrossDomainMessenger.address;
    return baseWriteAction(client, {
        abi: crossDomainMessengerAbi,
        contractAddress: cdmAddress,
        contractFunctionName: 'sendMessage',
        contractArgs: [target, message, minGasLimit],
    }, parameters);
}
/**
 * Simulate the {@link withdrawCrossDomainMessage} action.
 * @category Actions
 * @param client - Client for the withdrawing chain
 * @param parameters - {@link WithdrawCrossDomainMessageParameters}
 * @returns The contract functions return value. {@link WithdrawCrossDomainMessageContractReturnType}
 */
export async function simulateWithdrawCrossDomainMessage(client, parameters) {
    const { target, message, minGasLimit = 0n } = parameters;
    const cdmAddress = parameters.crossDomainMessengerAddress ??
        contracts.l2CrossDomainMessenger.address;
    const { result } = await simulateContract(client, {
        abi: crossDomainMessengerAbi,
        address: cdmAddress,
        functionName: 'sendMessage',
        args: [target, message, minGasLimit],
        ...parameters,
    });
    return result;
}
/**
 * Estimate the gas cost of the {@link withdrawCrossDomainMessage} action.
 * @category Actions
 * @param client - Client for the withdrawing chain
 * @param parameters - {@link WithdrawCrossDomainMessageParameters}
 * @returns The gas cost
 */
export async function estimateWithdrawCrossDomainMessageGas(client, parameters) {
    const { target, message, minGasLimit = 0n } = parameters;
    const cdmAddress = parameters.crossDomainMessengerAddress ??
        contracts.l2CrossDomainMessenger.address;
    return estimateContractGas(client, {
        abi: crossDomainMessengerAbi,
        address: cdmAddress,
        functionName: 'sendMessage',
        args: [target, message, minGasLimit],
        ...parameters,
    });
}
//# sourceMappingURL=withdrawCrossDomainMessage.js.map