import { parseAccount } from 'viem/accounts';
import { estimateContractGas, readContract, simulateContract, } from 'viem/actions';
import { optimismMintableERC20Abi, standardBridgeAbi } from '../abis.js';
import { contracts } from '../contracts.js';
import { baseWriteAction } from '../core/baseWriteAction.js';
/**
 * Action to withdraw an OptimismMintableERC20 | OptimismSuperchainERC20 into its remote ERC20.
 * @category Actions
 * @param client - Client for the withdrawing chain
 * @param parameters - {@link WithdrawOptimismERC20Parameters}
 * @returns The hash of the withdrawing transaction
 * @example
 * import { withdrawOptimismERC20 } from '@eth-optimism/viem'
 * import { op } from '@eth-optimism/viem/chains'
 *
 * const client = createPublicClient({ chain: op, transport: http() })
 * const hash = await withdrawOptimismERC20(client, {
 *   tokenAddress: '0x0000000000000000000000000000000000000000',
 *   amount: 1000000000000000000n,
 * })
 */
export async function withdrawOptimismERC20(client, parameters) {
    const { to = parameters.to ?? parseAccount(parameters.account).address, minGasLimit = parameters.minGasLimit ?? 0, extraData = parameters.extraData ?? '0x', tokenAddress: localTokenAddress, amount, } = parameters;
    const remoteTokenAddress = await readContract(client, {
        abi: optimismMintableERC20Abi,
        address: localTokenAddress,
        functionName: 'remoteToken',
    });
    const bridgeAddress = parameters.bridgeAddress ?? contracts.l2StandardBridge.address;
    return baseWriteAction(client, {
        abi: standardBridgeAbi,
        contractAddress: bridgeAddress,
        contractFunctionName: 'bridgeERC20To',
        contractArgs: [
            localTokenAddress,
            remoteTokenAddress,
            to,
            amount,
            minGasLimit,
            extraData,
        ],
    }, parameters);
}
/**
 * Estimate the gas cost of the {@link withdrawOptimismERC20} action.
 * @category Actions
 * @param client - Client for the withdrawing chain
 * @param parameters - {@link WithdrawOptimismERC20Parameters}
 * @returns The gas cost
 */
export async function estimateWithdrawOptimismERC20Gas(client, parameters) {
    const { to = parameters.to ?? parseAccount(parameters.account).address, minGasLimit = parameters.minGasLimit ?? 0, extraData = parameters.extraData ?? '0x', tokenAddress: localTokenAddress, amount, } = parameters;
    const remoteTokenAddress = await readContract(client, {
        abi: optimismMintableERC20Abi,
        address: localTokenAddress,
        functionName: 'remoteToken',
    });
    const bridgeAddress = parameters.bridgeAddress ?? contracts.l2StandardBridge.address;
    return estimateContractGas(client, {
        abi: standardBridgeAbi,
        address: bridgeAddress,
        functionName: 'bridgeERC20To',
        args: [
            localTokenAddress,
            remoteTokenAddress,
            to,
            amount,
            minGasLimit,
            extraData,
        ],
        ...parameters,
    });
}
/**
 * Simulate the {@link withdrawOptimismERC20} action.
 * @category Actions
 * @param client - Client for the withdrawing chain
 * @param parameters - {@link WithdrawOptimismERC20Parameters}
 * @returns The simulated transaction
 */
export async function simulateWithdrawOptimismERC20(client, parameters) {
    const { to = parameters.to ?? parseAccount(parameters.account).address, minGasLimit = parameters.minGasLimit ?? 0, extraData = parameters.extraData ?? '0x', tokenAddress: localTokenAddress, amount, } = parameters;
    const remoteTokenAddress = await readContract(client, {
        abi: optimismMintableERC20Abi,
        address: localTokenAddress,
        functionName: 'remoteToken',
    });
    const bridgeAddress = parameters.bridgeAddress ?? contracts.l2StandardBridge.address;
    const { result } = await simulateContract(client, {
        abi: standardBridgeAbi,
        address: bridgeAddress,
        functionName: 'bridgeERC20To',
        args: [
            localTokenAddress,
            remoteTokenAddress,
            to,
            amount,
            minGasLimit,
            extraData,
        ],
        ...parameters,
    });
    return result;
}
//# sourceMappingURL=withdrawOptimismERC20.js.map